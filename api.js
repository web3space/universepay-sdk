// Generated by LiveScript 1.6.0
(function(){
  var ref$, get, post, currencies, languages, keys, md5, currencyCodes, languageCodes, urls, uuidv4, buildMakeRequest, buildApi, toString$ = {}.toString;
  ref$ = require('superagent'), get = ref$.get, post = ref$.post;
  currencies = require('./currencies.ls');
  languages = require('./languages.ls');
  keys = require('prelude-ls').keys;
  md5 = require('md5');
  currencyCodes = keys(
  currencies);
  languageCodes = keys(
  languages);
  urls = {
    test: 'https://universepay.online/sandbox/gateway/',
    prod: 'https://universepay.online/new/gateway/'
  };
  uuidv4 = function(){
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c){
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x'
        ? r
        : r & 3 | 8;
      return v.toString(16);
    });
  };
  buildMakeRequest = function(arg$){
    var url, config;
    url = arg$.url, config = arg$.config;
    return function(body, cb){
      var invoice, MERCHANT_ID, MERCHANT_SECRET, hash, _cmd, get_trans, request;
      if (toString$.call(body).slice(8, -1) !== 'Object') {
        return cb("Expected first argument, type object");
      }
      if (toString$.call(cb).slice(8, -1) !== 'Function') {
        return cb("Expected second argument, type function");
      }
      if (toString$.call(body.amount).slice(8, -1) !== 'Number') {
        return cb("Expected body.amount -> Minor units, e.g. 1 for 0.01");
      }
      if (currencyCodes.indexOf(body.currency) === -1) {
        return cb("Expected body.currency -> Currency code in ISO 4217 : " + currencyCodes);
      }
      if (languageCodes.indexOf(body.language) === -1) {
        return cb("Expected body.language -> Language codes : " + languageCodes);
      }
      if (toString$.call(body.cl_fname).slice(8, -1) !== 'String' || body.cl_fname.length > 200) {
        return cb("Expected body.cl_fname -> Client's first name (max length 200)");
      }
      if (toString$.call(body.cl_lname).slice(8, -1) !== 'String' || body.cl_lname.length > 200) {
        return cb("Expected body.cl_lname -> Client's last name (max length 200)");
      }
      if (toString$.call(body.cl_email).slice(8, -1) !== 'String' || body.cl_email.length > 200) {
        return cb("Expected body.cl_email -> Client's email (max length 200)");
      }
      if (toString$.call(body.cl_country).slice(8, -1) !== 'String' || body.cl_country.length !== 2) {
        return cb("Expected body.cl_country -> Country code in ISO 3166-1-alpha-2");
      }
      if (toString$.call(body.cl_city).slice(8, -1) !== 'String' || body.cl_city.length > 200) {
        return cb("Expected body.cl_city -> City (max length 200)");
      }
      if (toString$.call(body.description).slice(8, -1) !== 'String' || body.description.length > 200) {
        return cb("Expected body.description -> Description of the transaction, visible to the client, e.g. description of the product (max length 200)");
      }
      if (toString$.call(body.psys).slice(8, -1) !== 'String' || body.psys.length > 200) {
        return cb("Expected body.psys -> Payment system alias. Empty for default or taken from the available payment systems list. (max length 200)");
      }
      invoice = uuidv4();
      MERCHANT_ID = config.MERCHANT_ID, MERCHANT_SECRET = config.MERCHANT_SECRET;
      hash = md5(body.amount + "" + body.currency + MERCHANT_ID + MERCHANT_SECRET);
      _cmd = 'payment';
      get_trans = 1;
      request = (import$({
        _cmd: _cmd,
        get_trans: get_trans,
        merchant_id: MERCHANT_ID,
        hash: hash,
        invoice: invoice
      }, body));
      return post(url).type('form').send(request).end(function(err, res){
        console.log(url, (import$({
          _cmd: _cmd,
          get_trans: get_trans,
          merchant_id: MERCHANT_ID,
          hash: hash,
          invoice: invoice
        }, body)));
        if (err != null) {
          return cb(err.text);
        }
        if (res.text.indexOf('ERROR') > -1) {
          return cb(err.text);
        }
        return cb(null, res.text);
      });
    };
  };
  buildApi = function(arg$, cb){
    var name, config, url, makeRequest;
    name = arg$.name, config = arg$.config;
    url = urls[name];
    if (url == null) {
      return cb(name + " url not found");
    }
    makeRequest = buildMakeRequest({
      url: url,
      config: config
    });
    return cb(null, {
      makeRequest: makeRequest
    });
  };
  module.exports = function(config, cb){
    if (toString$.call(config.MERCHANT_ID).slice(8, -1) !== 'String') {
      return cb("MERCHANT_ID is required");
    }
    if (toString$.call(config.MERCHANT_SECRET).slice(8, -1) !== 'String') {
      return cb("MERCHANT_SECRET is required");
    }
    return buildApi({
      name: 'test',
      config: config
    }, function(err, test){
      if (err != null) {
        return cb(err);
      }
      return buildApi({
        name: 'prod',
        config: config
      }, function(err, prod){
        if (err != null) {
          return cb(err);
        }
        return cb(null, {
          test: test,
          prod: prod
        });
      });
    });
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
